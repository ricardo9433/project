import time
import struct
from typing import List, Tuple

# SM4参数定义
SM4_BLOCK_SIZE = 16  # 128位
SM4_KEY_SIZE = 16    # 128位
ROUND_KEY_NUM = 32

# S盒
S_BOX = [
    0xd6, 0x90, 0xe9, 0xfe, 0xcc, 0xe1, 0x3d, 0xb7, 0x16, 0xb6, 0x14, 0xc2, 0x28, 0xfb, 0x2c, 0x05,
    0x2b, 0x67, 0x9a, 0x76, 0x2a, 0xbe, 0x04, 0xc3, 0xaa, 0x44, 0x13, 0x26, 0x49, 0x86, 0x06, 0x99,
    0x9c, 0x42, 0x50, 0xf4, 0x91, 0xef, 0x98, 0x7a, 0x33, 0x54, 0x0b, 0x43, 0xed, 0xcf, 0xac, 0x62,
    0xe4, 0xb3, 0x1c, 0xa9, 0xc9, 0x08, 0xe8, 0x95, 0x80, 0xdf, 0x94, 0xfa, 0x75, 0x8f, 0x3f, 0xa6,
    0x47, 0x07, 0xa7, 0xfc, 0xf3, 0x73, 0x17, 0xba, 0x83, 0x59, 0x3c, 0x19, 0xe6, 0x85, 0x4f, 0xa8,
    0x68, 0x6b, 0x81, 0xb2, 0x71, 0x64, 0xda, 0x8b, 0xf8, 0xeb, 0x0f, 0x4b, 0x70, 0x56, 0x9d, 0x35,
    0x1e, 0x24, 0x0e, 0x5e, 0x63, 0x58, 0xd1, 0xa2, 0x25, 0x22, 0x7c, 0x3b, 0x01, 0x21, 0x78, 0x87,
    0xd4, 0x00, 0x46, 0x57, 0x9f, 0xd3, 0x27, 0x52, 0x4c, 0x36, 0x02, 0xe7, 0xa0, 0xc4, 0xc8, 0x9e,
    0xea, 0xbf, 0x8a, 0xd2, 0x40, 0xc7, 0x38, 0xb5, 0xa3, 0xf7, 0xf2, 0xce, 0xf9, 0x61, 0x15, 0xa1,
    0xe0, 0xae, 0x5d, 0xa4, 0x9b, 0x34, 0x1a, 0x55, 0xad, 0x93, 0x32, 0x30, 0xf5, 0x8c, 0xb1, 0xe3,
    0x1d, 0xf6, 0xe2, 0x2e, 0x82, 0x66, 0xca, 0x60, 0xc0, 0x29, 0x23, 0xab, 0x0d, 0x53, 0x4e, 0x6f,
    0xd5, 0xdb, 0x37, 0x45, 0xde, 0xfd, 0x8e, 0x2f, 0x03, 0xff, 0x6a, 0x72, 0x6d, 0x6c, 0x5b, 0x51,
    0x8d, 0x1b, 0xaf, 0x92, 0xbb, 0xdd, 0xbc, 0x7f, 0x11, 0xd9, 0x5c, 0x41, 0x1f, 0x10, 0x5a, 0xd8,
    0x0a, 0xc1, 0x31, 0x88, 0xa5, 0xcd, 0x7b, 0xbd, 0x2d, 0x74, 0xd0, 0x12, 0xb8, 0xe5, 0xb4, 0xb0,
    0x89, 0x69, 0x97, 0x4a, 0x0c, 0x96, 0x77, 0x7e, 0x65, 0xb9, 0xf1, 0x09, 0xc5, 0x6e, 0xc6, 0x84,
    0x18, 0xf0, 0x7d, 0xec, 0x3a, 0xdc, 0x4d, 0x20, 0x79, 0xee, 0x5f, 0x3e, 0xd7, 0xcb, 0x39, 0x48
]

# 系统参数FK
FK = [0xa3b1bac6, 0x56aa3350, 0x677d9197, 0xb27022dc]

# 固定参数CK
CK = [
    0x00070e15, 0x1c232a31, 0x383f464d, 0x545b6269,
    0x70777e85, 0x8c939aa1, 0xa8afb6bd, 0xc4cbd2d9,
    0xe0e7eef5, 0xfc030a11, 0x181f262d, 0x343b4249,
    0x50575e65, 0x6c737a81, 0x888f969d, 0xa4abb2b9,
    0xc0c7ced5, 0xdce3eaf1, 0xf8ff060d, 0x141b2229,
    0x30373e45, 0x4c535a61, 0x686f767d, 0x848b9299,
    0xa0a7aeb5, 0xbcc3cad1, 0xd8dfe6ed, 0xf4fb0209,
    0x10171e25, 0x2c333a41, 0x484f565d, 0x646b7279
]

# 循环左移函数
def rotate_left(x: int, n: int) -> int:
    n = n % 32
    return ((x << n) | (x >> (32 - n))) & 0xFFFFFFFF

# S盒替换
def s_box_substitute(byte: int) -> int:
    return S_BOX[byte]

# 字替换
def word_substitute(word: int) -> int:
    byte0 = (word >> 24) & 0xFF
    byte1 = (word >> 16) & 0xFF
    byte2 = (word >> 8) & 0xFF
    byte3 = word & 0xFF
    
    return (s_box_substitute(byte0) << 24) | (s_box_substitute(byte1) << 16) | \
           (s_box_substitute(byte2) << 8) | s_box_substitute(byte3)

# L函数
def L(word: int) -> int:
    return word ^ rotate_left(word, 2) ^ rotate_left(word, 10) ^ rotate_left(word, 18) ^ rotate_left(word, 24)

# L'函数
def L_prime(word: int) -> int:
    return word ^ rotate_left(word, 13) ^ rotate_left(word, 23)

# 轮函数
def round_function(X0: int, X1: int, X2: int, X3: int, rk: int) -> int:
    return X0 ^ L(word_substitute(X1 ^ X2 ^ X3 ^ rk))

# 密钥扩展算法 - 基础实现
def expand_key_base(key: bytes) -> List[int]:
    MK = struct.unpack(">IIII", key)
    K = [0] * (ROUND_KEY_NUM + 4)
    
    for i in range(4):
        K[i] = MK[i] ^ FK[i]
    
    rk = [0] * ROUND_KEY_NUM
    for i in range(ROUND_KEY_NUM):
        K[i+4] = K[i] ^ L_prime(word_substitute(K[i+1] ^ K[i+2] ^ K[i+3] ^ CK[i]))
        rk[i] = K[i+4]
    
    return rk

# 加密函数 - 基础实现
def encrypt_base(plaintext: bytes, rk: List[int]) -> bytes:
    X = list(struct.unpack(">IIII", plaintext))
    
    for i in range(ROUND_KEY_NUM):
        X.append(round_function(X[i], X[i+1], X[i+2], X[i+3], rk[i]))
    
    # 逆序输出
    ciphertext = X[ROUND_KEY_NUM:ROUND_KEY_NUM+4][::-1]
    return struct.pack(">IIII", *ciphertext)

# 解密函数 - 基础实现
def decrypt_base(ciphertext: bytes, rk: List[int]) -> bytes:
    # 解密使用与加密相同的结构，只是轮密钥顺序相反
    decrypt_rk = rk[::-1]
    return encrypt_base(ciphertext, decrypt_rk)

# SM4类 - 基础实现
class SM4Base:
    def __init__(self, key: bytes):
        self.rk = expand_key_base(key)
    
    def encrypt(self, plaintext: bytes) -> bytes:
        return encrypt_base(plaintext, self.rk)
    
    def decrypt(self, ciphertext: bytes) -> bytes:
        return decrypt_base(ciphertext, self.rk)

# -------------------- 优化实现 --------------------

# 预计算T盒（用于轮函数）
def precompute_t_box():
    T = [0] * 256
    for i in range(256):
        s_val = s_box_substitute(i)
        T[i] = L(s_val << 24)  # 只考虑高8位的影响
    return T

# 预计算T'盒（用于密钥扩展）
def precompute_t_prime_box():
    T_prime = [0] * 256
    for i in range(256):
        s_val = s_box_substitute(i)
        T_prime[i] = L_prime(s_val << 24)  # 只考虑高8位的影响
    return T_prime

# 密钥扩展算法 - 查表优化
def expand_key_optimized(key: bytes) -> List[int]:
    T_prime = precompute_t_prime_box()
    MK = struct.unpack(">IIII", key)
    K = [0] * (ROUND_KEY_NUM + 4)
    
    for i in range(4):
        K[i] = MK[i] ^ FK[i]
    
    rk = [0] * ROUND_KEY_NUM
    for i in range(ROUND_KEY_NUM):
        # 使用T'盒进行优化
        word = K[i+1] ^ K[i+2] ^ K[i+3] ^ CK[i]
        byte0 = (word >> 24) & 0xFF
        byte1 = (word >> 16) & 0xFF
        byte2 = (word >> 8) & 0xFF
        byte3 = word & 0xFF
        
        t_prime_val = T_prime[byte0] ^ (rotate_left(T_prime[byte1], 8)) ^ \
                     (rotate_left(T_prime[byte2], 16)) ^ (rotate_left(T_prime[byte3], 24))
        
        K[i+4] = K[i] ^ t_prime_val
        rk[i] = K[i+4]
    
    return rk

# 加密函数 - 查表优化
def encrypt_optimized(plaintext: bytes, rk: List[int]) -> bytes:
    T = precompute_t_box()
    X = list(struct.unpack(">IIII", plaintext))
    
    for i in range(ROUND_KEY_NUM):
        word = X[i+1] ^ X[i+2] ^ X[i+3] ^ rk[i]
        byte0 = (word >> 24) & 0xFF
        byte1 = (word >> 16) & 0xFF
        byte2 = (word >> 8) & 0xFF
        byte3 = word & 0xFF
        
        t_val = T[byte0] ^ (rotate_left(T[byte1], 8)) ^ \
               (rotate_left(T[byte2], 16)) ^ (rotate_left(T[byte3], 24))
        
        X.append(X[i] ^ t_val)
    
    # 逆序输出
    ciphertext = X[ROUND_KEY_NUM:ROUND_KEY_NUM+4][::-1]
    return struct.pack(">IIII", *ciphertext)

# SM4类 - 查表优化实现
class SM4Optimized:
    def __init__(self, key: bytes):
        self.rk = expand_key_optimized(key)
    
    def encrypt(self, plaintext: bytes) -> bytes:
        return encrypt_optimized(plaintext, self.rk)
    
    def decrypt(self, ciphertext: bytes) -> bytes:
        # 解密使用与加密相同的结构，只是轮密钥顺序相反
        decrypt_rk = self.rk[::-1]
        return encrypt_optimized(ciphertext, decrypt_rk)

# -------------------- 分组模式实现 --------------------

# 填充函数 - PKCS#7
def pkcs7_pad(data: bytes, block_size: int) -> bytes:
    pad_len = block_size - (len(data) % block_size)
    padding = bytes([pad_len]) * pad_len
    return data + padding

# 去填充函数 - PKCS#7
def pkcs7_unpad(data: bytes) -> bytes:
    pad_len = data[-1]
    if pad_len < 1 or pad_len > len(data):
        raise ValueError("无效的填充")
    for i in range(1, pad_len + 1):
        if data[-i] != pad_len:
            raise ValueError("无效的填充")
    return data[:-pad_len]

# ECB模式加密
def ecb_encrypt(plaintext: bytes, key: bytes, optimized: bool = False) -> bytes:
    if len(key) != SM4_KEY_SIZE:
        raise ValueError(f"密钥长度必须为{SM4_KEY_SIZE}字节")
    
    # 选择使用基础实现还是优化实现
    sm4_class = SM4Optimized if optimized else SM4Base
    sm4 = sm4_class(key)
    
    # 填充明文
    padded_plaintext = pkcs7_pad(plaintext, SM4_BLOCK_SIZE)
    
    # 分块加密
    ciphertext = b''
    for i in range(0, len(padded_plaintext), SM4_BLOCK_SIZE):
        block = padded_plaintext[i:i+SM4_BLOCK_SIZE]
        encrypted_block = sm4.encrypt(block)
        ciphertext += encrypted_block
    
    return ciphertext

# ECB模式解密
def ecb_decrypt(ciphertext: bytes, key: bytes, optimized: bool = False) -> bytes:
    if len(key) != SM4_KEY_SIZE:
        raise ValueError(f"密钥长度必须为{SM4_KEY_SIZE}字节")
    if len(ciphertext) % SM4_BLOCK_SIZE != 0:
        raise ValueError("密文长度必须是块大小的整数倍")
    
    # 选择使用基础实现还是优化实现
    sm4_class = SM4Optimized if optimized else SM4Base
    sm4 = sm4_class(key)
    
    # 分块解密
    plaintext = b''
    for i in range(0, len(ciphertext), SM4_BLOCK_SIZE):
        block = ciphertext[i:i+SM4_BLOCK_SIZE]
        decrypted_block = sm4.decrypt(block)
        plaintext += decrypted_block
    
    # 去填充
    return pkcs7_unpad(plaintext)

# CBC模式加密
def cbc_encrypt(plaintext: bytes, key: bytes, iv: bytes, optimized: bool = False) -> bytes:
    if len(key) != SM4_KEY_SIZE:
        raise ValueError(f"密钥长度必须为{SM4_KEY_SIZE}字节")
    if len(iv) != SM4_BLOCK_SIZE:
        raise ValueError(f"IV长度必须为{SM4_BLOCK_SIZE}字节")
    
    # 选择使用基础实现还是优化实现
    sm4_class = SM4Optimized if optimized else SM4Base
    sm4 = sm4_class(key)
    
    # 填充明文
    padded_plaintext = pkcs7_pad(plaintext, SM4_BLOCK_SIZE)
    
    # 分块加密
    ciphertext = b''
    previous_block = iv
    
    for i in range(0, len(padded_plaintext), SM4_BLOCK_SIZE):
        block = padded_plaintext[i:i+SM4_BLOCK_SIZE]
        
        # 异或操作
        xored_block = bytes(a ^ b for a, b in zip(block, previous_block))
        
        # 加密
        encrypted_block = sm4.encrypt(xored_block)
        ciphertext += encrypted_block
        
        # 更新前一个块
        previous_block = encrypted_block
    
    return ciphertext

# CBC模式解密
def cbc_decrypt(ciphertext: bytes, key: bytes, iv: bytes, optimized: bool = False) -> bytes:
    if len(key) != SM4_KEY_SIZE:
        raise ValueError(f"密钥长度必须为{SM4_KEY_SIZE}字节")
    if len(iv) != SM4_BLOCK_SIZE:
        raise ValueError(f"IV长度必须为{SM4_BLOCK_SIZE}字节")
    if len(ciphertext) % SM4_BLOCK_SIZE != 0:
        raise ValueError("密文长度必须是块大小的整数倍")
    
    # 选择使用基础实现还是优化实现
    sm4_class = SM4Optimized if optimized else SM4Base
    sm4 = sm4_class(key)
    
    # 分块解密
    plaintext = b''
    previous_block = iv
    
    for i in range(0, len(ciphertext), SM4_BLOCK_SIZE):
        block = ciphertext[i:i+SM4_BLOCK_SIZE]
        
        # 解密
        decrypted_block = sm4.decrypt(block)
        
        # 异或操作
        xored_block = bytes(a ^ b for a, b in zip(decrypted_block, previous_block))
        plaintext += xored_block
        
        # 更新前一个块
        previous_block = block
    
    # 去填充
    return pkcs7_unpad(plaintext)

# -------------------- 性能测试 --------------------

def performance_test():
    key = bytes(range(16))
    plaintext = bytes(range(16))
    iv = bytes(range(16))
    
    # 基础实现测试
    start_time = time.time()
    for _ in range(1000):
        ecb_encrypt(plaintext, key, optimized=False)
    base_time = time.time() - start_time
    
    # 优化实现测试
    start_time = time.time()
    for _ in range(1000):
        ecb_encrypt(plaintext, key, optimized=True)
    optimized_time = time.time() - start_time
    
    print(f"基础实现耗时: {base_time:.6f}秒")
    print(f"优化实现耗时: {optimized_time:.6f}秒")
    print(f"性能提升: {(base_time - optimized_time) / base_time * 100:.2f}%")
    
    # 功能验证
    encrypted = ecb_encrypt(plaintext, key, optimized=True)
    decrypted = ecb_decrypt(encrypted, key, optimized=True)
    print(f"功能验证: {'通过' if decrypted == plaintext else '失败'}")

# 测试代码
if __name__ == "__main__":
    performance_test()    
